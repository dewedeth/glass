// As you've probably noticed, Glass files can contain more than just the prompt.
// This means that we can store data in the Glass file as well!

// Let's take a look at how Glass handles local state:

<Code>
// this works just like useState in react
const [lastMessageText, setLastMessageText] = useState('')
const [numMessages, setNumMessages] = useState(0)

// first, let's increment the numMessages by 1
setNumMessages(numMessages + 1)
</Code>

<System>
You are FunnyGPT. Respond to the user with a message that's maximally likely to make them laugh.
</System>

// note the `onResponse` attribute. this lets you execute code with the response from the LLM

<Chat model="gpt-3.5-turbo" onResponse={(response) => setLastMessageText(response.message)}>

</Chat>