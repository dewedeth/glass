# THIS FILE WAS GENERATED BY GLASS -- DO NOT EDIT!

import json

def getYrlRcSxbperzbNpefdrrPbmIuvNidrtuPrompt(interpolationArgs = {}):
    def get_test_data(): return {}
    
    def compile(opt = { "args": {} }):
        # Here's the same example, but running python instead of typescript.
        # You can set a default language for glass in vscode preferences (`glass.defaultLanguageMode`).
        # You can also set the language in a glass document itself (see above).
        
        examples = [
            {
                "message": "ur product never works, def want my money back",
                "classification": "NEEDS_ATTENTION"
            },
            {
                "message": "Love it! This saves so much time",
                "classification": "SKIP"
            },
            {
                "message": "Does the product come in silver?",
                "classification": "NEEDS_ATTENTION"
            },
            {
                "message": "would highly recommend not buying this product, I've had so many problems",
                "classification": "NEEDS_ATTENTION"
            }
        ]
        GLASSVAR = {
            0: """{}""".format("""<System>
{}
</System>""".format("""You are an AI community moderator. Your job is to read and process comments on a social media post to see if the comments have a question or complaint. If the comment has a question or complaint, return "NEEDS_ATTENTION". Otherwise, return "SKIP". You are provided examples to help identify comments that are a question or complaint.""".format())),
            1: "\n\n".join(list(map(lambda example: """{}""".format("""
{}

{}
""".format("""<User>
{}
</User>""".format("""{}""".format(example["message"])), """<Assistant>
{}
</Assistant>""".format("""{}""".format(example["classification"])))), examples))),
            2: """{}""".format("""<User>
{}
</User>""".format("""i'm so angry""".format())),
            3: """{}""".format("""<Request model="gpt-3.5-turbo">
{}
</Request>""".format("""""".format()))
    }
        return {
            "fileName": "YRlRCSxbperzbNpefdrrPbmIUvNidrtu.glass",
            "model": "gpt-3.5-turbo",
            "state": {},
            "originalDoc": "---\nlanguage: python\n---\n\n# Here's the same example, but running python instead of typescript.\n# You can set a default language for glass in vscode preferences (`glass.defaultLanguageMode`).\n# You can also set the language in a glass document itself (see above).\n\nexamples = [\n    {\n        \"message\": \"ur product never works, def want my money back\",\n        \"classification\": \"NEEDS_ATTENTION\"\n    },\n    {\n        \"message\": \"Love it! This saves so much time\",\n        \"classification\": \"SKIP\"\n    },\n    {\n        \"message\": \"Does the product come in silver?\",\n        \"classification\": \"NEEDS_ATTENTION\"\n    },\n    {\n        \"message\": \"would highly recommend not buying this product, I've had so many problems\",\n        \"classification\": \"NEEDS_ATTENTION\"\n    }\n]\n\n<System>\nYou are an AI community moderator. Your job is to read and process comments on a social media post to see if the comments have a question or complaint. If the comment has a question or complaint, return \"NEEDS_ATTENTION\". Otherwise, return \"SKIP\". You are provided examples to help identify comments that are a question or complaint.\n</System>\n\n<For each={examples} as=\"example\">\n\n<User>\n${example[\"message\"]}\n</User>\n\n<Assistant>\n${example[\"classification\"]}\n</Assistant>\n\n</For>\n\n<User>\ni'm so angry\n</User>\n\n<Request model=\"gpt-3.5-turbo\" />",
            "interpolationArgs": opt["args"],
            "interpolatedDoc": """
# Here's the same example, but running python instead of typescript.
# You can set a default language for glass in vscode preferences (`glass.defaultLanguageMode`).
# You can also set the language in a glass document itself (see above).

examples = [
    {
        "message": "ur product never works, def want my money back",
        "classification": "NEEDS_ATTENTION"
    },
    {
        "message": "Love it! This saves so much time",
        "classification": "SKIP"
    },
    {
        "message": "Does the product come in silver?",
        "classification": "NEEDS_ATTENTION"
    },
    {
        "message": "would highly recommend not buying this product, I've had so many problems",
        "classification": "NEEDS_ATTENTION"
    }
]

{}

{} /><User>
i'm so angry
</User>{}<Request model="gpt-3.5-turbo" />{}""".format(GLASSVAR[0], GLASSVAR[1], GLASSVAR[2], GLASSVAR[3]),
        }
    
    testData = get_test_data()
    args = { "args": testData }
    args.update(interpolationArgs)
    return json.dumps(compile(args))


print(getYrlRcSxbperzbNpefdrrPbmIuvNidrtuPrompt())