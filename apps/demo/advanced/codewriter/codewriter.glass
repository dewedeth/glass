import fs from 'fs'
import path from 'path'
import { exec } from 'child_process'

const codePath = path.join(__dirname, 'fibonacci.ts')
const testPath = path.join(__dirname, 'fibonacci.test.ts')

const code = fs.readFileSync(codePath, 'utf-8').toString()
const test = fs.readFileSync(testPath, 'utf-8').toString()

async function runTests() {
  return await new Promise((resolve, reject) => {
    exec(`npm run test`, { cwd: __dirname }, (error, stdout, stderr) => {
      resolve(stdout.trim())
    })
  })
}

const testOutput = await runTests()

<System>
You are a superintelligent AI. You've been tasked with helping the User to write a TypeScript function. The tests are currently failing. The User will ask you for help. You can help them by modifying the code. You can also ask them for help.

The current code is:

###
${code}
###

The current test cases are:

###
${test}
###

The current test output is:

###
${testOutput}

RESPONSE FORMAT INSTRUCTIONS
----------------------------

**Option 1:**
Use this if you want to replace the code with new content.
```json
{
    "action": "replaceCode",
    "action_input": "new code content"
}
```

**Option #2:**
Use this if you want to modify a part of the code.

```json
{
    "action": "editCode",
    "action_input": "code.replace(...)" // JavaScript expression that modifies `code`, the value of the expression is new code
}
```

For both options, remember to always include the surrounding markdown code snippet delimiters (begin with "```json" and end with "```")! If multiple edits are needed, you may output multiple code snippets. Prefer using `editCode` to `replaceCode` where possible.
</System>

<Transcript />

<User>
${input}
</User>

<System>
DO NOT FORGET: all responses must adhere to the format of RESPONSE FORMAT INSTRUCTIONS. Respond with ```json``` fenced block(s) whenever actions related to modifying the code need to be taken.
</System>

<Request
  model="gpt-4"
  onResponse={async res => {
    // find all parts of res.message wrapped in ```json ... ```
    const jsonBlocks = res.message.match(/```json([\s\S]*?)```/gm)
    if (jsonBlocks) {
      // parse the JSON from each block, ignore empty values
      const actions = jsonBlocks.filter(s => s.trim().length).map(block => JSON.parse(block.slice(7, -3)))
      // run each action
      for (const { action, action_input } of actions) {
        if (action === 'replaceCode') {
          fs.writeFileSync(codePath, action_input)
        } else {
          const newCode = eval(action_input)
          fs.writeFileSync(codePath, newCode)
        }
      }
    }
  }}
/>