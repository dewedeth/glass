// THIS FILE WAS GENERATED BY GLASS -- DO NOT EDIT!

import { interpolateGlassChat } from '@glass-lang/glasslib'

export async function getBrowserPrompt(args: {
  question: string,
  url: string,
}) {
  const { question, url } = args
  const res = await fetch(url)
  const response = await res.text()
  const interpolations = {
    0: response,
    1: question,
  }
  const TEMPLATE =
    "// first, we must load in the website HTML\n<Code>\nconst res = await fetch(url)\nconst response = await res.text()\n</Code>\n\n\n// start with the system prompt\n<System>\nUse the data below from the API to answer the user's request:\n###\n${0}\n###\n</System>\n\n// add the user's most recent message\n<User>\n${1}\n</User>"
  return interpolateGlassChat('browser', TEMPLATE, interpolations)
}

export function getFancyForPrompt() {
  const interpolations = {
    'jsx-0': [
      { role: 'user', content: 'name an ice cream' },
      { role: 'assistant', content: 'Vanilla' },
      { role: 'user', content: 'name a fruit' },
    ]
      .map(
        (m) => `<Block role={${JSON.stringify(m.role)}}>
${m.content}
</Block>`
      )
      .join('\n\n'),
  }
  const TEMPLATE = '${jsx-0}'
  return interpolateGlassChat('fancy-for', TEMPLATE, interpolations)
}

export function getIfStatementPrompt(args: { subject: string }) {
  const { subject } = args
  const useMe = true
  const interpolations = {
    'jsx-0': false
      ? `<User if={false}>
Who was gandhi?
</User>`
      : '',
    'jsx-1': useMe
      ? `<User if={useMe}>
Who was ${subject}?
</User>`
      : '',
    'jsx-2': false
      ? `<User if="false">
Who was gandhi?
</User>`
      : '',
  }
  const TEMPLATE =
    '<Code>\nconst useMe = true\n</Code>\n\n<System>\nYou are a helpful assistant.\n</System>\n\n${jsx-0}\n\n${jsx-1}\n\n${jsx-2}'
  return interpolateGlassChat('if-statement', TEMPLATE, interpolations)
}

export function getNestedBlocksPrompt() {
  const useGandhi = true
  const interpolations = {
    'jsx-0': useGandhi
      ? `<Text if={useGandhi}>
who was gandhi?
</Text>`
      : '',
    'jsx-1': !useGandhi
      ? `<Text if={!useGandhi}>
who was Einstein?
</Text>`
      : '',
  }
  const TEMPLATE =
    '<Code>\nconst useGandhi = true\n</Code>\n\n<System>\nYou are a highly-intelligent AI.\n</System>\n\n<User>\n${jsx-0}\n\n${jsx-1}\n</User>'
  return interpolateGlassChat('nested-blocks', TEMPLATE, interpolations)
}

export function getSimpleChatPrompt(args: { query: string }) {
  const { query } = args

  const interpolations = {
    0: query,
  }
  const TEMPLATE =
    '<System>\nYou are a highly-intelligent AI. \n\nYour job is to respond to the User.\n\nPlease respond in valid JSON with the following format:\n```js\n{\n    "response": string,\n    "confidence": number\n}\n```\n</System>\n\n\n<User>\n${0}\n</User>\n\n<System>\nThe `confidence` field should be a number between 1 (least confident) and 10 (most confident).\n</System>'
  return interpolateGlassChat('simple-chat', TEMPLATE, interpolations)
}

export function getSimpleForPrompt() {
  const interpolations = {
    'jsx-0': [
      { role: 'user', content: 'name an ice cream' },
      { role: 'assistant', content: 'Vanilla' },
      { role: 'user', content: 'name a color' },
    ]
      .map(
        (item) => `<Block role={${JSON.stringify(
          item.role
        )}} content={${JSON.stringify(item.content)}}>
</Block>`
      )
      .join('\n\n'),
  }
  const TEMPLATE = '${jsx-0}'
  return interpolateGlassChat('simple-for', TEMPLATE, interpolations)
}

import { db } from '../db'

export async function getTranscriptPrompt(args: { conversationId: string }) {
  const { conversationId } = args
  const conversation = await db.conversation.findUniqueOrThrow({
    where: { id: conversationId },
  })
  const messages = await db.message.findMany({
    where: { conversationId: conversation.id },
  })
  const interpolations = {
    'jsx-0': messages
      .map(
        (item) => `<Block role={${JSON.stringify(
          item.role
        )}} content={${JSON.stringify(item.content)}}>
</Block>`
      )
      .join('\n\n'),
  }
  const TEMPLATE =
    "import {db} from './db'\n\n<Code>\nconst conversation = await db.conversation.findUniqueOrThrow({where: {id: conversationId}})\nconst messages = await db.message.findMany({where: {conversationId: conversation.id}})\n</Code>\n\n${jsx-0}"
  return interpolateGlassChat('transcript', TEMPLATE, interpolations)
}

import { sayHello } from '../sayHello'

export function getWithImportPrompt() {
  const interpolations = {
    0: sayHello({ name: 'john' }),
  }
  const TEMPLATE =
    "import {sayHello} from './sayHello'\n\n<System>\nYou are a helpful assistant.\n</System>\n\n<User>\n${0}\n</User>"
  return interpolateGlassChat('with-import', TEMPLATE, interpolations)
}

export const Glass = {
  browser: getBrowserPrompt,
  fancyFor: getFancyForPrompt,
  ifStatement: getIfStatementPrompt,
  nestedBlocks: getNestedBlocksPrompt,
  simpleChat: getSimpleChatPrompt,
  simpleFor: getSimpleForPrompt,
  transcript: getTranscriptPrompt,
  withImport: getWithImportPrompt,
}
