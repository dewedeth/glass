// THIS FILE WAS GENERATED BY GLASS -- DO NOT EDIT!

import { runGlass, useState } from '@glass-lang/glasslib'

export function getBMyfirstchat1685489131074Prompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: {}) => {
    const GLASS_STATE = {}

    const GLASSVAR = {}
    const TEMPLATE = `<System>
You are StoryGPT.
</System>


<Chat model="gpt-3.5-turbo" />`
    return {
      fileName: 'b-myfirstchat.1685489131074.glass',
      model: 'gpt-3.5-turbo',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<System>\nYou are StoryGPT.\n</System>\n\n\n<Chat model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      onResponse: undefined,
    }
  }

  return { getTestData, compile }
}

export const Glass = {
  bMyfirstchat1685489131074Glass: getBMyfirstchat1685489131074Prompt,
}

const { getTestData, compile } = getBMyfirstchat1685489131074Prompt()

;(async function run() {
  const t = getTestData()
  const res: any[] = []
  if (Array.isArray(t)) {
    for (const args of t) {
      const c: any = await compile({ args: { ...args, ...({"input":"hi"}) } })
      res.push(c)
    }
  } else {
    const c: any = await compile({ args: { ...t, ...({"input":"hi"}) } })
    res.push(c)
  }
  const ret = await runGlass(res[0], { progress: (data: { nextDoc: string; nextInterpolatedDoc: string; rawResponse?: string }) => {
    // console.log('glass-progress: ' + JSON.stringify(data))
  } })
  console.log('glass-result: ' +  JSON.stringify(ret))
})()
